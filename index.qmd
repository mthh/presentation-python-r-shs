---
title: "Analyse comparative Python / R pour les SHS"
author: "Matthieu Viry"
subtitle: 16 mai 2023
format:
  revealjs:
    embed-resources: false
    slide-number: true
    show-slide-number: all
    chalkboard: true
    logo: images/logos-footer.png
title-slide-attributes: 
  data-background-image: images/logos-footer.png
  data-background-size: 42%
  data-background-position: 50% 90%
css: ['static/style.css']
prefer-html: true
---


# Introduction

## Pourquoi comparer Python et R

<br>
<div style="text-align: center;">
<img src="images/logo-python-vs-r.png" style="margin: auto; width: 600px; height: auto;" />
</div>

::: {.notes}

- parce qu'on me la demand√© sur la base d'une pr√©sentation donn√©e il y a 4 ans de pr√©sentation de l'√©cosysteme python

:::

## Pourquoi comparer Python et R


<div style="text-align: center;">
<img src="images/book-r-python.png" style="margin: auto; width: 960px; height: auto;" />
</div>

::: {.notes}

- mais aussi car on peut voir ...

:::

## Pourquoi comparer Python et R


<div style="text-align: center;">
<img src="images/tweets.png" style="margin: auto; width: 960px; height: auto;" />
</div>

::: {.notes}

- √ßa semble √™tre une question qui anime pas mal les gens, certains ont des avis tranch√© sur la question, d'autres les classes au m√™me niveau, etc.

:::


## Pourquoi comparer Python et R


<div style="text-align: center;">
<img src="images/youtube-r-python.png" style="margin: auto; width: 960px; height: auto; border: solid 1px black;" />
</div>

::: {.notes}

- la question est largement trait√©e, par exemple sur youtube avec des dizaines ou des centaines de courtes vid√©os sur le sujet

:::


## Pourquoi comparer Python et R

<br>

<div style="text-align: center;">
<img src="images/google-hits.png" style="margin: auto; width: 900px; height: auto; border: solid 1px black;" />
</div>

::: {.notes}

- la question est largement trait√©e √©galement sous forme de courts articles sur le Web... n√©anmoins il reste difficile de se faire un avis
  objectif....

:::

## Pourquoi vous posez-vous la question ?

- Un **besoin sp√©cifique** en terme de manipulation de donn√©es ? **Curiosit√©** ? Se conforter dans son choix ? **Procrastination** √† l'apprentissage de la programmation ?

<div class="center">
<img src="images/1107_R1IgVklWIDMyODYtMTc.jpg" style="width: 400px"/>
<p class="small"><i><a href="https://www.vecteezy.com/free-vector/procrastination">Procrastination Vectors by Vecteezy</a></i></p>
</div>

## Mon profil (vis √† vis des langages informatiques)

:::{.medium}

- Apprentissage du **C** vers 14 ans (pas r√©utilis√© pass√© 17 ans)

- Licence & Master en g√©ographie (apprentissage de **R** pour la statistique)

- Fin de M2, "projet pro." avec 4 camarades : coder en Python nous aurait √©vit√© beaucoup de clics r√©p√©titif pour la partie SIG.. *"je devrais apprendre"* - analyses multivari√©es en **R**

- Un peu de ch√¥mage apr√®s un poste d'IE : j'apprends le **Python**

- IE en sciences de l'information g√©ographique (**Python**, **JavaScript**, un peu de **R** car tous les coll√®gues utilisent R)

- J'apprends le **Rust** sur mon temps libre

- Th√®se d'informatique (Web S√©mantique + G√©ovisualisation - **Java**, **JavaScript**, **Python**)

- IR en d√©veloppement logiciel (*probablement un peu de tous les langages cit√©s pr√©c√©demment*)

:::

## 

<div class="center">
<img src="images/python.png" style="width: 500px"/>
<p class="small">Source<i><a href="https://xkcd.com/353/">https://xkcd.com/353/</a></i></p>
</div>

:::{.notes}
caption : "I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I'm leaving you."
:::

## Programme üìÑ

<br>

- Pr√©sentation des deux langages et de leur environment (Documentation, IDEs, interpr√©teur, etc.)

- Syntaxe, s√©mantique et structures de donn√©es natives

- Python et R pour analyser des donn√©es

- Python et R pour valoriser ses traitements

- Python et R pour ... tout le reste

- Discussion

# Historique et comparaison des langages sur le papier...

## Python

<img src="images/logo-python.png" style="position: absolute;top: 10px;right: 10px;width: 105px !important;height: auto;" />

<br>

- Langage cr√©√© √† la toute fin des ann√©es 80 - premi√®re version publique sortie en 1991.

- **Libre** (r√©git par la *Python Software Foundation License*, √©quivalent √† BSD)

- Langage **polyvalent**, **interpr√©t√©**, **multi-paradigme** (imp√©ratif, fonctionnel, OO, ..)

- **Typage dynamique fort** (et *duck typing*)

- Toujours en d√©veloppement actif (derni√®re version en avril 2023)

::: {.notes}


En 1989 aux Pays-Bas, Guido van Rossum invente le langage de programmation Python.
C‚Äôest un fan de la s√©rie t√©l√©vis√©e Monty Python‚Äôs Flying Circus, donc pour rendre un hommage √† la s√©rie il donne le nom Python.
Ce n‚Äôest qu‚Äôen 1991 que la premi√®re version de ce langage a √©t√© publi√©e.

C‚Äôest la Python Software Foundation qui se charge de d√©velopper Python et de faire vivre la communaut√© de d√©veloppeurs et utilisateurs.


- Il est multiplateforme : fonctionne sur des nombreux syst√®mes d‚Äôexploitation ;
- C'est un logiciel libre
- C‚Äôest un langage interpr√©t√© : le script python est directement ex√©cut√©, il n‚Äôa pas besoin d‚Äô√™tre compil√© avant d‚Äô√™tre ex√©cut√© ;
- C‚Äôest un langage orient√© objet : on peut cr√©er des programmes qui imite le comportement du monde r√©el ;
- Enfin, il est notamment utilis√© en bio-informatique, et plus couramment en analyse de donn√©es.


Sur le site web, la description en une phrase du projet est "Python is a programming language that lets you work quickly and integrate systems more effectively"

:::

## R

<img src="images/logo-r.png" style="position: absolute;top: 10px;right: 10px;width: 105px !important;height: auto;" />

<br>

- Le projet **R** na√Æt en 1993 comme un projet de recherche √† l'universit√© d'Auckland.

- C'est une impl√©mentation du langage **S** (d√©velopp√© au milieu des ann√©es 70 dans les laboratoires Bell)

- **Libre** (licence *GNU GPL*)

- Langage **interpr√©t√©**, **multi-paradigme** (imp√©ratif, fonctionnel, OO, ..)

- **Typage dynamique**

- Toujours en d√©veloppement actif (derni√®re version en avril 2023)


::: {.notes}


Sur le site web, le titre est "The R Project for Statistical Computing"

et la description en une phrase du projet est : "R is a free software environment for statistical computing and graphics".

Le projet R na√Æt en 1993 comme un projet de recherche de Ross Ihaka et Robert Gentleman √† l'universit√© d'Auckland.

:::

## Python / R

<br>

:::: {.columns}

::: {.column .medium width="50%"}

### Python

- *General-purpose programming language*

- *"Jack of all trades, master of none"* ?

- Utilis√© par Google, Facebook, Spotify, IBM, etc.

:::

::: {.column .medium width="50%"}


### R

- *For statistical computing and graphics*

- *"By statisticians, for statisticians"*

- Utilis√© par Google, Facebook, Microsoft, etc.

:::

::::

- Mais la question se pose car Python est de plus en plus comp√©tent pour l'analyse de donn√©es...

:::{.notes}
"Jack of all trades, master of none" est une figure de style utilis√©e en r√©f√©rence √† une personne qui a
acquis de nombreuses comp√©tences, plut√¥t que d'acqu√©rir une expertise en se concentrant sur une seule.
:::

## Par rapport aux autres langages de programmation

<br>

- Les deux sont des langages **_interpr√©t√©s_** (*langage de script*), par opposition √† des langages **_compil√©s_** (C, C++, Rust, Fortran, Pascal, etc.).

- Les deux sont des langages de (tr√®s) **haut-niveau**, **modernes** et **matures**

<br>

- *Julia ? Haskel ? Rust ? Java ?*

:::{.notes}

- Un compilateur est le terme utilis√© pour d√©signer un programme qui transforme un code source √©crit dans un langage de programmation en un autre langage informatique. Il transforme un langage simple compr√©hensible par l'homme en un language plus complexe compr√©hensible par la machine, le language machine. Inversement, un programme effectuant la t√¢che inverse est un d√©compilateur.

- L'interpr√©teur est un outil qui analyse votre code source, le traduit en language machin√© et l'ex√©cute. L√† o√π votre compilateur compile votre code une seule fois et g√©n√®re un ex√©cutable, l'interpr√©teur va r√©interpr√©ter votre code √† chaque lancement de votre programme.

- Un programme script est ex√©cut√© √† partir du fichier source via un interpr√©teur de script.

- Un programme compil√© est ex√©cut√© √† partir d'un bloc en langage machine issu de la traduction du fichier source.

- Un langage "semi-interpr√©t√©" ou "semi-compil√©" comprend un interpr√®te qui lit le langage cible avant de g√©n√©rer un "Bytecode". Une machine virtuelle va ensuite ex√©cuter ce bytecode. Le langage semi-interpr√©t√© le plus connu est le Java

- En programmation informatique, un langage de programmation √† haut niveau d'abstraction g√©n√©ralement appel√© langage de haut niveau est un langage de programmation orient√© autour du probl√®me √† r√©soudre, qui permet d'√©crire des programmes en utilisant des mots usuels des langues naturelles (tr√®s souvent de l'anglais) et des symboles math√©matiques familiers. Un langage de haut niveau fait abstraction des caract√©ristiques techniques du mat√©riel utilis√© pour ex√©cuter le programme, tels que les registres et les drapeaux du processeur.

Haskell est un langage de programmation fonctionnel fond√© sur le lambda-calcul et la logique combinatoire. Son nom vient du math√©maticien et logicien Haskell Curry. Il a √©t√© cr√©√© en 1990 par un comit√© de chercheurs en th√©orie des langages int√©ress√©s par les langages fonctionnels et l'√©valuation paresseuse.

Julia est un langage de programmation de haut niveau, performant et dynamique pour le calcul scientifique, avec une syntaxe famili√®re aux utilisateurs d'autres environnements de d√©veloppement similaires (Matlab, R, Scilab, Python, etc.). 2012.
:::

## Fonctionnalit√©s de base / Python

::: {.medium}

- Ex√©cuter un script Python 

```bash
$ python mon_script.py
```

- Ouvrir un interpr√©teur interactif :

```bash
$ python
```

- Exemple

```bash
mthh@mthh-Swift-SF314-511:~$ python3
Python 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print('Hello everybody !')
Hello everybody !
>>> exit()
```

:::

## Fonctionnalit√©s de base / R

::: {.medium}

- Ex√©cuter un script R

```bash
$ Rscript mon_script.r
```

- Ouvrir un interpr√©teur interactif :

```bash
$ R
```

- Exemple

```bash
mthh@mthh-Swift-SF314-511:~$ R

R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

(...)

> print('Hi !')
[1] "Hi !"
> q()
Save workspace image? [y/n/c]: n
```

:::


# Pr√©sentation compar√©e des √©cosyst√®mes

## √âcosyst√®me R

- Centr√© autour de l'interpr√©teur [**R**](https://www.r-project.org/)

- Un IDE avec une position quasi-h√©g√©monique : [**RStudio**](https://posit.co/products/open-source/rstudio/) - Plus r√©cemment, √©galement des utilisateurs de [Visual Studio Code](https://code.visualstudio.com/)

<div class="center">
<img src="https://upload.wikimedia.org/wikipedia/commons/e/ed/RStudio_IDE_screenshot.png" style="width: 750px"/>
</div>

## √âcosyst√®me Python

- Une impl√©mentation de r√©f√©rence du langage [**Python**](https://www.python.org/) : [**CPython**](https://github.com/python/cpython)
  (mais d'autres impl√©mentations : Jython, IronPython, PyPy, etc.)

- Plusieurs *distributions* de Python (principalement [**Anaconda**](https://anaconda.org/), une distribution des langages de programmation Python et R d√©di√©e √† la science des donn√©es et √† l'apprentissage automatique)

<div class="center">
<img src="images/logo-anaconda.png" />
<p class="small">Source: <a href="https://anaconda.org">anaconda.org</a></p>
</div>


::: {.notes}

- CPython est l'impl√©mentation de r√©f√©rence de Python. C'est la version que la plupart des gens utilisent, notamment parce qu'elle est la plus facile √† installer et √† utiliser. Il est √©crit en langage C et est maintenu par la Python Software Foundation.

- Jython est une impl√©mentation de Python √©crite en Java. Il permet aux d√©veloppeurs d'√©crire des programmes Python qui peuvent √™tre ex√©cut√©s sur n'importe quelle machine virtuelle Java (JVM). Cela le rend particuli√®rement utile pour les d√©veloppeurs qui travaillent dans un environnement Java.

- IronPython est une impl√©mentation de Python √©crite en C# et destin√©e √† √™tre utilis√©e dans l'environnement .NET. Il permet aux d√©veloppeurs d'√©crire des programmes Python qui peuvent √™tre ex√©cut√©s sur la plate-forme .NET. Il est particuli√®rement utile pour les d√©veloppeurs qui travaillent dans un environnement .NET.

- PyPy est une impl√©mentation alternative de Python qui est destin√©e √† √™tre plus rapide que CPython. Il est √©crit en langage RPython et utilise une technique d'optimisation appel√©e compilation √† la vol√©e pour acc√©l√©rer l'ex√©cution des programmes.


Anaconda est une distribution gratuite et open source de Python et R, qui a √©t√© d√©velopp√©e pour simplifier le processus
d'installation et de gestion des packages, ainsi que le processus
de configuration et de gestion des environnements de d√©veloppement scientifique de donn√©es.

Il a √©t√© cr√©√© par Continuum Analytics, une entreprise qui a depuis √©t√© acquise par Anaconda, Inc.

Anaconda est livr√© avec une gamme compl√®te de biblioth√®ques scientifiques et de packages pr√©install√©s,
tels que NumPy, pandas, Matplotlib, SciPy, scikit-learn, TensorFlow et Jupyter Notebook, pour n'en citer que quelques-uns.
Il est √©galement facile √† √©tendre avec des packages tiers, en utilisant le gestionnaire de packages conda, qui permet de t√©l√©charger et d'installer des packages √† partir de sources externes.

L'un des avantages les plus importants d'Anaconda est son syst√®me de gestion d'environnement,
qui permet de cr√©er des environnements Python isol√©s pour diff√©rents projets.

:::

## √âcosyst√®me Python

- Plusieurs IDE appr√©ci√©s par les utilisateurs de Python : [**Spyder**](https://www.spyder-ide.org/) (IDE "scientifique", interface comparable √† RStudio),
  [**PyCharm**](https://www.jetbrains.com/pycharm/) (logiciel propri√©taire, plut√¥t pour d√©velopper des biblioth√®ques), [**Jupyter Lab**](https://jupyter.org/), **Visual Studio Code**.


<img src="images/spyder.png" style="float:left; width: 46%;" />

<img src="https://www.jetbrains.com/pycharm/img/screenshots/complexLook@2x.jpg" style="float:right; width: 46%;"/>

## Packages additionnels

<br>

Les **deux langages** proposent d'installer des **packages additionnels**, et, pour chacun des deux langages, des outils ainsi qu'un index de packages installables existent.

Des _diff√©rences importantes_ existent toutefois dans la _philosophie relative √† l'installation et √† la publication de ces packages_.

## Packages additionnels / Installation en Python

<br>

En Python, on installera ces packages en utilisant un outil en ligne de commande appel√© `pip`, avec des commandes comme :

```bash
$ pip install numpy
```

ou

```bash
$ python -m pip install numpy
```

## Packages additionnels / Installation en R

<br>

√Ä l'inverse, en R on installera les packages au sein de son environnement de travail actuel, depuis l'interpr√©teur R :

```R
install.packages('ggplot2')
```

## Packages additionnels / PyPI (Python)

<img src="images/logo-pypi.small.svg" style="width: 200px !important; height: auto !important;" />

- **PyPI** (Python Package Index) / [pypi.org](https://pypi.org/) : le d√©p√¥t tiers officiel du langage Python, qui h√©berge les packages sous
  la forme de fichiers sources et/ou de binaires pr√©compil√©s (*wheel*) - publication facile du moment que ce qui est vers√© est dans les formats
  attendus (mais risque de *typosquatting*, etc.)

- 453‚ÄØ395 packages disponibles, soit 4‚ÄØ451‚ÄØ674 versions (au 11/05/2023)

## Packages additionnels / Python

<div class="center">
<img src="images/python-stack.png" style="width:80%"/>
<p class="small">Source : <a href="https://jupytearth.org/jupyter-resources/introduction/ecosystem.html">https://jupytearth.org/jupyter-resources/introduction/ecosystem.html</a></p>
</div>

## Packages additionnels / CRAN (R)

<br>

- **CRAN** (The Comprehensive R Archive Network) / [cran.r-project.org](https://cran.r-project.org/) : index de packages supervis√© - les packages
  qui y sont vers√©s doivent respecter diff√©rentes contraintes et la validation du d√©p√¥t est effectu√©e par des humains (pas ou peu de risque de code malveillant)

<br>

- 19 495 packages disponible (au 11/05/2023)


## Packages additionnels / R

<div class="center">
<img src="images/tidyverse.png" style="width:95%"/>
<p class="small">Source : <a href="https://www.tidyverse.org/">https://www.tidyverse.org/</a></p>
</div>

## Documentation / Python

::: {.medium}
Un point fort de Python est sa documentation officielle, qui contient tout le n√©cessaire pour utiliser le langage de mani√®re proactive
(tutoriel, r√©f√©rence de l'ensemble des fonctions / objets de tous les modules de la biblioth√®que standard, etc.)
et qui est mise √† disposition dans plusieurs langues (Anglais, Fran√ßais, Espagnol, Cor√©en, Japonais, Chinois, etc.).
:::

![](images/python-documentation.png)


## Documentation / Python 


Il n'existe toutefois pas un seul standard pour consulter la documentation des diff√©rents modules additionnels Python
(cf. [Documentation Matplotlib](https://matplotlib.org/stable/api/index), [Documentation pandas](https://pandas.pydata.org/docs/reference/index.html#api)).

<img src="images/doc-geopandas.png" style="width: 40%; position: absolute; border: solid 1px black; left: 10px;" />

<img src="images/doc-matplotlib.png" style="width: 40%; position: absolute; border: solid 1px black; bottom: -60px; left: 29%;" />

<img src="images/doc-samgeo.png" style="width: 40%; position: absolute; border: solid 1px black; right: 10px;" />

## Documentation / R

La documentation de R, tout aussi compl√®te qu'elle soit est (selon moi) moins *user-friendly* et n'est disponible qu'en anglais.

En revanche, √† l'inverse de Python, la documentation de tous les packages additionnels publi√©s sur le CRAN est consultable dans un m√™me formalisme
(en [PDF](https://cran.r-project.org/web/packages/sf/sf.pdf) depuis le site du CRAN , ou via des sites Web comme [www.rdocumentation.org](https://www.rdocumentation.org/)).

<img src="images/doc-rbase-system.png" style="width: 40%; position: absolute; border: solid 1px black; left: 10px;" />

<img src="images/doc-mapsf.png" style="width: 40%; position: absolute; border: solid 1px black; right: 10px;" />

# En terme de syntaxe √ßa donne quoi ?

## Syntaxe Python

<br><br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
from statistics import mean, stdev

def cv(x):
    moy = mean(x)
    s = stdev(x)
    result = s / moy
    return result

print(cv([5, 6, 3, 8, 9, 12]))
```

## Syntaxe R

<br><br>

```{r}
#| error: true
#| echo: true
#| message: true
#| cache: true
cv <- function(x) {
  moy <- mean(x)
  s <- sd(x)
  rslt <- s / moy
  rslt
}

print(cv(c(5, 6, 3, 8, 9, 12)))
```

## Python et l'indentation du code...

<br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
my_list = [1, 2, 3]

for item in my_list:
    if item % 2 == 0:
        print('even')
    else:
    print('odd')
```

## Python et l'indentation du code...

<br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
my_list = [1, 2, 3]

for item in my_list:
    if item % 2 == 0:
        print('even')
    else:
        print('odd')
```

## Python et l'indentation du code...

<br>

- Respecter les r√®gles d‚Äôindentations est *obligatoire* en Python.

- Ce n'est pas une *contrainte* lors d'une session de travail car les IDE guident la position du curseur.

- Cette indentation a un r√¥le direct sur le contr√¥le du flux d'ex√©cution.

- Elle permet notamment d'√©viter l'utilisation d'accolades (*curly brackets*) pour d√©limiter les blocs et de point-virgules pour d√©limiter les instructions.


## Python et l'indentation du code...

<br>

Le code qui suit est volontairement incorrect mais ne g√©n√®re pas d'erreur lors de l'ex√©cution :

```{python}
#| echo: true
li1 = [1, 2, 3, 4, 5, 6]
li2 = [4, 20, 31, 87, 123, 621]

# Additionnons les deux listes, √©l√©ments par √©l√©ments,
#¬†et stockons chaque r√©sultat dans une nouvelle liste
result = []

for item1, item2 in zip(li1, li2):
    new_item = item1 + item2
result.append(new_item)

print(result)
```

## Python et l'indentation du code...

<br>

Une fois l'indentation corrig√©e...

```{python}
#| echo: true
li1 = [1, 2, 3, 4, 5, 6]
li2 = [4, 20, 31, 87, 123, 621]

# Additionnons les deux listes, √©l√©ments par √©l√©ments,
#¬†et stockons chaque r√©sultat dans une nouvelle liste
result = []

for item1, item2 in zip(li1, li2):
    new_item = item1 + item2
    result.append(new_item)

print(result)
```

## R, accolades et *pipe*

<br>

√Ä l'inverse de Python, R utilise des accolades pour d√©limiter les blocs d'instructions et ne se soucie donc pas de l'indentation (on veillera quand m√™me √† √™tre coh√©rent afin de faciliter la lecture du code)

```{r}
#| echo: true
my_list <- list(1, 2, 3)

for (item in my_list) {
  if (item %% 2 == 0) {
    print("even")
  } else {
    print("odd")
  }
}
```

## R, accolades et *pipe*

<br>

- R propose par ailleurs un op√©rateur `pipe` (depuis R 4.1.0 - Mai 2021) pour encha√Æner les commandes, permettant ainsi
de remplacer une expression telle que 

```{r}
#| echo: true
exp(sqrt(log(12, base = 10)))
```

par 

```{r}
#| echo: true
12 |> log(base = 10) |> sqrt() |> exp()
```

::: {.notes}
Il s'agit d'une question de gout, et √ßa d√©pend aussi des expressions √† encha√Æner...dans l'exemple actuel je pr√©f√®re la version sans l'op√©rateur pipe, que je trouve non ambigue et facilement lisible par un public venant de n'importe quel langage...
:::

## R, accolades et *pipe*

<br>

:::{.medium}

- Depuis la sortie du package `magrittr` (en 2014), il existe un op√©rateur `pipe` s'√©crivant `%>%`, couramment utilis√©
  dans le *tidyverse*

```R
library(dplyr)

lemur_data <- lemurs %>% 
  filter(taxon == "ECOL",
         sex == "M",
         age_category == "adult") %>% 
  select(c(age_at_wt_mo, weight_g)) %>% 
  rename(Age = age_at_wt_mo, 
         Weight = weight_g)
```

- Des diff√©rences existent toutefois entre `|>` et `%>%`

- En Python on ne trouvera pas de nouveaux op√©rateurs de ce type (d√©finis par des packages)

:::

<!-- 

## Philosophie Python

:::{.medium}

```{python}
#| echo: true
import this
```

:::

-->


# *Data structures* natives

:::{.small}
*Les structures de donn√©es sont les √©l√©ments fondamentaux autour desquels vous construisez vos programmes. Chaque structure de donn√©es fournit une mani√®re particuli√®re d'organiser les donn√©es afin d'y acc√©der efficacement.*
:::

## Python

<br>

:::{.medium}

Python est livr√© avec un ensemble complet de structures de donn√©es dans sa biblioth√®que standard :

- `dict` (tableau associatif)

```{python}
#| echo: true
my_dict = { 'john': 32, 'jane': 27, 'jack': 30 }
print(my_dict['john'])
```

- `tuple` (un conteneur immuable),

```{python}
#| echo: true
my_coordinates = (2.349014, 48.864716)
```

- `list` (tableau dynamique mutable),

```{python}
#| echo: true
my_list = ['a', 12, (2.349014, 48.864716), { "foo": 42 }]
```

- `array` (tableau typ√© de base), `enum` (√©num√©ration), etc.

:::

## Python *(classes)*

<br>

Comme il s'agit d'un langage orient√©-objet, il est √©galement possible de d√©finir des classes, permettant de facilement mod√©liser des cat√©gories d'objets...

```{python}
#| echo: true
class Point:
    def __init__(self, x, y):
      self.x = x
      self.y = y

    def distance(self, other):
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

## Python *(classes)*

<br>
<br>

Instanciation et utilisation :

```{python}
#| echo: true
p1 = Point(2, 6)
p2 = Point(9, 9)

print('Distance = ', p1.distance(p2))
```

## R

:::{.medium}

|         | Homogenous          | Heterogenous |
|---------|:-------------------:|:------------:|
| 1d      | `vector`, `factor`  | `list`       |
| 2d      | `matrix`            | `data.frame` |
| nd      | `array`             |              |

Utilisation

```r
my_vector <- c(23.6, 89.1, 21.7)

my_factor <- factor(c("a", "b", "a", "a"))

my_list <- list("a", 12, 21)

my_other_list <- list(x=2.349014, y=48.864716)

df <- data.frame(
    emp_name = c("Rick","Dan","Michelle","Ryan","Jane"),
    salary = c(623.3,515.2,611.0,729.0,843.25)
)
```
:::

:::{.notes}
- Vectors

- Lists

- Matrices

- Arrays

- Factors

- Data Frames
:::

## R *(classes)*

<br>

- R est aussi un langage orient√©-objet

- Mais plusieurs APIs en comp√©tition pour faire de la programmation orient√©e-objet en R (*S3*, *R6*, *S4*)

- Surtout utilis√©s par les d√©veloppeurs de biblioth√®ques et/ou les d√©veloppeurs avanc√©s en R.

- L'API pr√©sent√©e aux utilisateurs semble plus *fonctionnelle* qu'*orient√©e-objet*


## R *(classes)*

*Ici avec le syst√®me __S4__...*

```{r}
#| echo: true
#| output: false
library(methods)

setClass("Point", 
         slots = c(
           x = "numeric", 
           y = "numeric"
         )
)

setGeneric("x", function(pt) standardGeneric("x"))
setGeneric("x<-", function(pt, value) standardGeneric("x<-"))
setGeneric("y", function(pt) standardGeneric("y"))
setGeneric("y<-", function(pt, value) standardGeneric("y<-"))
setGeneric("distance", function(pt1, pt2) standardGeneric("distance"))

setMethod("x", "Point", function(pt) pt@x)
setMethod("y", "Point", function(pt) pt@y)

setMethod("x<-", "Point", function(pt, value) {
  pt@x <- value
  pt
})
setMethod("y<-", "Point", function(pt, value) {
  pt@y <- value
  pt
})

setMethod("distance", "Point", function(pt1, pt2) {
  sqrt((pt2@x - pt1@x) ** 2 + (pt2@y - pt1@y) ** 2)
})

```

## R *(classes)*

<br>


Instanciation et utilisation :

```{r}
#| echo: true
p1 <- new("Point", x = 2, y = 6)
p2 <- new("Point", x = 3, y = 9)

print(distance(p1, p2))
```


# La syntaxe c'est bien... et la s√©mantique qui y est associ√©e ?

## R

S√©mantique *copy-on-modify* :

```{r}
#| echo: true
my_vec <- c(1, 2, 5)
other_vec <- my_vec
# Pour l'instant 'other_vec' et 'my_vec' pointent vers le m√™me objet..

# Modifions un √©l√©ment de 'other_vec'..
other_vec[3] <- 11
# une copie de 'my_vec' a √©t√© faite, son 3 √©l√©ment a √©t√© modifi√© puis 'other_vec' s'est mis √† pointer vers cette copie

print(my_vec)
print(other_vec)
```

:::{.medium}
Pour en savoir plus sur ce point [*Advanced R* (Hadley Wickham)](https://bookdown.dongzhuoer.com/hadley/adv-r/copy-on-modify.html)
:::

## Python

S√©mantique *pass-by-assignment* et diff√©rence entre types muables et immuables :

```{python}
#| echo: true
# le type list est muable
a = [1, 3, 5]
b = a # 'a' et 'b' pointent vers le m√™me objet

b[2] = 11 # Modifie l'objet vers lequel pointe 'b' qui est √©galement celui vers lequel pointe 'a'
```

```{python}
#| echo: true
i = 5 # les entiers sont immuables
j = i
i = i + 1 # la valeur 5 ne peut pas √™tre modifi√©e, un nouvel objet est cr√©√© ici

print(i) # 6
print(j) # 7
```

:::{.medium}
Pour en savoir plus sur ce point : [Documentation officielle -  Questions fr√©quemment pos√©es sur Python](https://docs.python.org/fr/3/faq/programming.html#why-did-changing-list-y-also-change-list-x)
:::

:::{.notes}

Les instructions d'affectation en Python ne copient pas les objets, elles cr√©ent des liens entre une cible et un objet.
Pour les collections qui sont mutables ou qui contiennent des √©l√©ments mutables, une copie est parfois n√©cessaire afin de pouvoir modifier une copie sans modifier l'autre.

Copie superficielle (*Shallow copy*) vs. profonde (*deep copy*).

:::

## Indices

<br>

- En Python les indices de liste commencent √† 0 :

```{python}
#| echo: true
my_list = [1, 3, 5]
print(my_list[0])
```

- En R ils commencent √† 1 :

```{r}
#| echo: true
my_list <- list(1, 3, 5)
print(my_list[1])
```

## Maintenabilit√© du code

<br>

```{python}
#| echo: true
class Point:
    def __init__(self, x, y):
      self.x = x
      self.y = y

    def distance(self, other):
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

## Maintenabilit√© du code

<br>

```{python}
#| echo: true
class Point:
    def __init__(self, x: float, y: float) -> None:
      self.x = x
      self.y = y

    def distance(self, other: Point) -> float:
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

- [_**Type hint**_](https://docs.python.org/fr/3/library/typing.html) ...
- \+ analyse statique du code ([*mypy*](https://www.mypy-lang.org/), IDE, etc.)

# Manipuler des tableaux de valeurs

:::{.small}
Les premi√®res diff√©rences notables entre Python et R...
:::

## Tableaux de valeurs en R

<br>

Le type `vector` est adapt√© pour stocker des tableaux de valeurs (du m√™me type) unidimensionnels
et le type `matrix` est adapt√© pour stocker des tableaux de valeurs (du m√™me type) bidimensionnels.

```{r}
#| echo: true
my_vec <- c(1, 2, 3, 4)

print(my_vec + 2)
```

## Tableaux de valeurs en R

<br>

```{r}
#| echo: true
my_matrix <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
print(my_matrix)

other_mat <- my_matrix * my_matrix
print(other_mat)

print(other_mat[2, 1])
```


## Tableaux de valeurs en Python

Les types natifs `list` (conteneur h√©t√©rog√®ne) et `array`  
(tableau typ√©) ne supportent les op√©rations vectoris√©es comme R.  

- La solution : la biblioth√®que `NumPy` ([numpy.org](https://numpy.org/)).

<img src="images/logo-numpy.svg" style="position: absolute; width: 150px !important; height: auto !important; right: -10px; top: 160px;"/>

```{python}
#| echo: true
import numpy as np

my_array = np.array([1, 2, 3, 4])

print(my_array + 2)
```

:::{.notes}

Aller sur https://numpy.org/ et
:::


## Tableaux de valeurs en Python

<br>

```{python}
#| echo: true
my_matrix = my_array.reshape(2, 2)

print(my_matrix)

other_mat = my_matrix * my_matrix
print(other_mat)

print(other_mat[1, 0])
```

- Voir la sortie HTML du (petit) [notebook sur NumPy](./notebooks/ExempleNumpy.html)

# Explorer un jeu de donn√©es...

:::{.small}

Nous allons voir, dans chacun des deux langages, comment ouvrir et pr√©parer un jeu de donn√©es pour y effectuer plusieurs traitements courants :

- analyse statistique
- traitement automatique de la langue naturelle
- apprentissage automatique et apprentissage profond
- visualisation

:::

:::{.notes}

Les *dataframes* : structure de donn√©es commune √† de nombreuses biblioth√®ques de traitement de donn√©es, qui organisent
les donn√©es dans un tableau bidimensionnel de lignes et de colonnes, nomm√©es, √† l'instar d'une feuille de calcul (excel, etc.).

On peut importer les donn√©es dans des dataframes depuis diff√©rents types de formats, CSV, Excel, JSON, etc.

:::

## R et dataframes (1)

<br>

- Le type natif `data.frame`.

- D'autres biblioth√®ques ([`data.table`](https://rdatatable.gitlab.io/data.table/), [`tibble`](https://tibble.tidyverse.org/), etc.)

## R et dataframes (2)

:::{.medium}

- Type natif `data.frame`

```{r}
#| echo: true
df <- data.frame(
   emp_id = c(1:5), 
   emp_name = c("Rick","Dan","Michelle","Ryan","Jane"),
   salary = c(623.3,515.2,611.0,729.0,843.25), 
   start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
   stringsAsFactors = FALSE
)
	
print(df)
str(df)
```

:::

## R et dataframes (3)

:::{.medium}

- Utilisation des biblioth√®ques du `tidyverse` avec `tibble` (*a modern reimagining of the data.frame*)

```{r}
#| echo: true
library(tibble)

df <- tibble(
  emp_id = c(1:5), 
  emp_name = c("Rick","Dan","Michelle","Ryan","Jane"),
  salary = c(623.3,515.2,611.0,729.0,843.25), 
  start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
)

print(df)
str(df)
```

:::

## Python et dataframes (1)

<img src="images/logo-pandas.svg" style="width: 220px !important; height: auto;" />

:::{.medium}

- On utilisera g√©n√©ralement la biblioth√®que [**Pandas**](https://pandas.pydata.org/) (*a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,
built on top of the Python programming language*)

- Tout le n√©cessaire pour importer des donn√©es (CSV, HDF5, XML, Excel, BD relationnelle, etc.), les manipuler (*group by*, s√©lection, filtrage, etc.), les combiner (*merge*, *join*, *concatenate*, *compare*), etc.

- Permet de travailler avec des s√©ries temporelles

- [Comparaison de l'API avec R dans la documentation](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html)

:::

## Python et dataframes (2)

:::{.medium}

```{python}
#| echo: true
import pandas as pd

data_dict = {
  "emp_id": list(range(5)),
  "emp_name": ["Rick", "Dan", "Michelle", "Ryan", "Jane"],
  "salary": [623.3, 515.2, 611.0, 729.0, 843.25],
  "start_date": pd.to_datetime(["2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27"]),
}

df = pd.DataFrame(data_dict)

print(df.head())
print(df.dtypes)
```

:::

## Python et dataframes (3)

<br>
<div class="center">
<img src="images/logo-polars.svg" style="width: 300px !important; height: auto;" />
</div>

- D'autres biblioth√®ques prometteuses sont en cours de d√©veloppement : [**Polars**](https://www.pola.rs/)

- Des bindings R existent aussi : [**rpolars**](https://rpolars.github.io/index.html)

## Python et dataframes (4)

<br>
<div class="center">
<img src="images/xarray-datastructure.png" style="width: 500px !important; height: auto;" />
</div>


- [**Xarray**](https://xarray.dev/) - *N-D labeled arrays and datasets in Python* (comme Pandas mais sur N dimensions)

<br>

## Valeurs manquantes

<br>

:::{.medium}

- **Stata** et **SAS** ont un syst√®me de valeurs manquantes √©tiquett√©es (*tagged NAs*)

- Il est possible d'avoir un r√©sultat similaires dans R avec le package [`labelled`](https://haven.tidyverse.org/reference/labelled.html)

- Des [conseils](https://pandas.pydata.org/docs/user_guide/missing_data.html) pour g√©rer les valeurs manquantes avec Pandas,
  mais pas de possibilit√© dans Pandas (√† ma connaissance) pour √©tiquetter les valeurs manquantes comme dans **Stata** / **SAS**

```{python}
#| echo: true
s_na = pd.Series([None, 1, 2], dtype='Int64')
print(s_na)
```

:::

:::{.notes}

Ainsi, Stata et SAS ont un syst√®me de valeurs manquantes √©tiquett√©es ou tagged NAs, o√π les valeurs manquantes peuvent recevoir une √©tiquette (une lettre entre a et z). De son c√¥t√©, SPSS permet d‚Äôindiquer, sous la forme de m√©tadonn√©es, que certaines valeurs devraient √™tre trait√©es comme des valeurs manquantes (par exemple que la valeur 8 correspont √† des refus et que la valeur 9 correspond √† des ne sait pas). Il s‚Äôagit alors de valeurs manquantes d√©finies par l‚Äôutilisateur ou user NAs.

:::

## R√©cup√©rer un vrai jeu de donn√©es

::: {.panel-tabset .medium}

## Python

```{python}
#| echo: true
import pandas as pd

house_sales = pd.read_csv('static/home_data.csv')
```

## R

```{r}
#| echo: true
house_sales <- readr::read_csv('static/home_data.csv')
```

## Data

:::{.small}

```{r}
library(knitr)
kable(head(house_sales))
```

:::

:::

:::{.medium}

Source : [House Sales in King County, USA](https://www.kaggle.com/datasets/harlfoxem/housesalesprediction)

- Voir les sorties HTML des notebooks [Jupyter](./notebooks/HouseSales.html) et [R Markdown](notebooks/house_sales.html) correspondants

:::


<!--
## Statistiques descriptives

::: {.panel-tabset}

## Python

```{python}
pd.set_option('display.max_columns', 12)
```

```{python}
#| echo: true
house_sales.describe()
```

## R

```{r}
#| echo: true
summary(house_sales)
```

:::
-->

## Statistiques bivari√©es et multivari√©es, en Python

<div class="center">
<img src="images/logos-sm-scikit-scipy.png" />
</div>

- [**Statsmodels**](https://www.statsmodels.org/) (Anova, r√©gression lin√©aire, r√©gression logistique, etc.)

- [Module *stats* de **SciPy**](https://docs.scipy.org/doc/scipy/tutorial/stats.html), [Module *cluster* de **SciPy**](https://docs.scipy.org/doc/scipy/reference/cluster.html), etc.

- [**Scikit-learn**](https://scikit-learn.org/), d√©velopp√©e par des membres de l'INRIA

:::{.notes}

Statsmodels propose destimer des mod√®les statistiques et d'effectuer des tests statistiques, biblioth√®que du point de vue des statistiques / des statisticiens.
Elle propose des r√©sum√©s similaires √† ceux qu'on peut obtenir dans R.

Scikit-learn propose certains des m√™mes mod√®les, mais du point de vue de l'apprentissage automatique.

xxx

L'un pour r√©pondre √† la question : "Quelles sont les preuves que X est li√© √† Y ?"

L'autre pour optimiser la pr√©cision de la pr√©diction et r√©pondre √† la question : "√âtant donn√© X, quelle pr√©diction devrions-nous faire pour Y ?".

xxx

Scikit :

- un outil de mod√©lisation pr√©dictive (notamment developp√© dans le cadre de travaux √† l'INRIA).
 
- documentation est tr√®s riche (aussi bien dans l'explication des concepts qui sont mobilis√©s que dans la description de l'API).
 
- de nombreuses fonctionnalit√©s pour pr√©parer les donn√©es (standardisation, extraction des √©chantillons, "vectorisation" de corpus de texte, etc.).
 
- l'API de l'ensemble des mod√®les suit strictement la m√™me logique : simplicit√© d'utilisation (pas forc√©ment de pr√©paration sp√©cifique des donn√©es pour les adapter √† un autre mod√®le par exemple).
 
- soin apport√© aux performances lors de l'ajout de fonctionnalit√©s.


:::

## Apprentissage automatique ou profond, en Python

<div class="center">
<img src="images/logos-ML.png" style="width: 38%" />
</div>

:::{.medium}

- [**Scikit-learn**](https://scikit-learn.org/) (*Classification, Regression, Clustering, Dimensionality reduction, Model selection, Preprocessing*)

- [**TensorFlow**](https://www.tensorflow.org/?hl=fr) (*"Cr√©ez des mod√®les de machine learning pour la production avec TensorFlow"*, d√©velopp√© par Google)

- [**Keras**](https://keras.io/) (*"Deep learning for humans"* - pour interagir avec des algorithmes de r√©seaux de neurones profonds et d'apprentissage automatique, dont ceux de TensorFlow)

- [**PyTorch**](https://pytorch.org/) (*An open source machine learning framework that accelerates the path from research prototyping to production deployment*)

:::

## Apprentissage automatique ou profond, en R


<div class="center">
<img src="images/logo-mlr3.svg" style="width: 200px"/>
</div>

:::{.medium}

- [**mlr3**](https://mlr3.mlr-org.com/) (*"Efficient, object-oriented programming on the building blocks of machine learning"*)

- **nnet** (fournis avec R base)

- **TensorFlow for R** (mais n√©cessite une installation Python avec TensorFlow)

- **Keras**, **Torch**

- En savoir plus sur le site du CRAN : [https://cran.r-project.org/web/views/MachineLearning.html](https://cran.r-project.org/web/views/MachineLearning.html)

:::

## Visualisation / R

<br>

- Utilisation des fonctionnalit√© de **R base** ou de biblioth√®ques comme **ggplot2** (une impl√©mentation de la *grammaire des graphiques*)

```{r}
data(mpg, package = "ggplot2")
mpg <- transform(mpg, cyl = factor(cyl), trans = factor(trans), drv = factor(drv), fl = factor(fl), class = factor(class))
levels(mpg$trans) <- c(rep("auto", 8), rep("manual", 2))
```

```{r}
#| echo: true
library(ggplot2)

ggplot(mpg, aes(x = drv, y = hwy)) +
  geom_violin(color = NA, fill = "lightgray", alpha = 0.5, trim = FALSE) +
  geom_boxplot(width = 0.2, varwidth = TRUE, outlier.shape = NA, fill = NA) +
  geom_jitter(width = 0.1, height = 0, alpha = 0.2)
```

:::{.notes}

Dans la syntaxe ci-dessus

- ggplot() sp√©cifie le jeu de donn√©es <data.name> √† analyser. <data.name> doit √™tre un objet de type data frame.

- aes() sp√©cifie les variables √† visualiser et associe √† chaque variable un emplacement ou un r√¥le: les axes (x, y), couleur (color), forme (shape), taille (size), etc.; voir la Section 9.2 pour plus √† ce sujet.

- geom_<xxx>(), o√π <xxx> doit √™tre remplac√©e par le nom d‚Äôune forme g√©om√©trique, sp√©cifie le type de repr√©sentation graphique souhait√©e: point_point() pour tracer des points, geom_line() pour des lignes, point_bar() pour des barres, geom_histogram() pour un histogramme, point_boxplot() pour un boxplot, geom_density() pour une densit√©, geom_smooth() pour une courbe de tendance, etc.; voir la Section 9.3 pour plus √† ce sujet.

:::

## Visualisation / Python

<img src="images/logo-matplotlib.svg" style="position: absolute; width: 160px; right: -10px; top: 40px;" />

- Utilisation de [**matplotlib**](https://matplotlib.org/) (et √©ventuellement de biblioth√®ques comme [**seaborn**](https://seaborn.pydata.org/), bas√© sur matplotlib, qui 
  offrent une API de plus haut-niveau pour faire facilement certains types de graphiques), principalement
  pour des graphiques statiques (images).

- [**Bokeh**](https://bokeh.org/) principalement pour des graphiques interactifs.

<div class="center">
<img src="images/bokeh-gallery.jpg" style="width:500px;"/>
</div>

- Totalement compatible avec la stack NumPy-Pandas-Jupyter-etc.


## Visualisation / Ponts entre R et Python

<br>

- Des biblioth√®ques sont disponibles dans les 2 langages : [**Plotly**](https://plotly.com/)

- **Bokeh** initialement pour Python mais disponible en R

- Une impl√©mentation de la grammaire des graphiques (*√† la ggplot2*) en Python avec [**plotnine**](https://plotnine.readthedocs.io/): 

```Python
from plotnine import ggplot, geom_point, aes, stat_smooth, facet_wrap
from plotnine.data import mtcars

(ggplot(mtcars, aes("wt", "mpg", color="factor(gear)"))
 + geom_point()
 + stat_smooth(method="lm")
 + facet_wrap("~gear"))
 ```

## G√©ospatial (vectoriel)

<br>

:::{.medium} 
M√™me si plusieurs solutions concurrentes existent dans chacun des 2 langages, les biblioth√®ques les plus utilis√©s dans les 2 langages
suivent la m√™me logique :

- utilisation sous-jacente de **GDAL/OGR** pour les I/O

- utilisation sous-jacente de **GEOS** pour manipuler les g√©om√©tries (pr√©dicats spatiaux, etc.)

- utilisation sous-jacente de **PROJ** pour manipuler les syst√®mes de coordonn√©e de r√©f√©rence

- √©tendre un type "data frame" pour permettre la pr√©sence d'une colonne de g√©om√©tries et pr√©sence de traitement appropri√©s

:::

## G√©ospatial (vecteur) / R

- Package [**sf**](https://r-spatial.github.io/sf/), qui √©tend le type `data.frame` de R base ou le type `tibble`

<img src="images/logo-sf.gif" />

- Cartographie : [**mapsf**](https://riatelab.github.io/mapsf/) ou [**tmap**](https://r-tmap.github.io/tmap/)

## G√©ospatial / Python

- Package [**geopandas**](https://geopandas.org/en/stable/), qui √©tend le type `DataFrame` de pandas en `GeoDataFrame`

<img src="images/logo_geopandas.svg" />

- Cartographie : [**cartopy**](https://scitools.org.uk/cartopy/docs/latest/), [**PyGMT**](https://www.pygmt.org/), [**GeoView**](https://geoviews.org/) (mais moins aboutis que `mapsf` pour les cartes g√©n√©ralement r√©alis√©es en SHS)

## G√©ospatial / Analyse spatiale

<br>

- [**PySAL**](http://pysal.org/pysal/) : *Python Spatial Analysis Library* (Autocorr√©lation spatiale, analyse des in√©galit√©s, s√©gr√©gation, analyse de r√©seaux, etc.)

<br>

- [**spdep**](https://r-spatial.github.io/spdep/), [**spatialreg**](https://r-spatial.github.io/spatialreg/), [**gstat**](https://github.com/r-spatial/gstat/) en R


## G√©ospatial / Raster

<br>

- [**rasterio**](https://rasterio.readthedocs.io/) (va permettre d'acc√©der aux donn√©es sous forme de tableaux NumPy)

<br>

- [**terra**](https://rspatial.org/pkg/index.html) (I/O, *spatial prediction*, etc.)


## Traitement automatique du langage naturel

- Python est devenu le langage particuli√®rement populaire pour la recherche et le d√©veloppement d'applications TAL, en partie gr√¢ce √† sa lisibilit√©,
  √† son vaste √©cosyst√®me d'apprentissage automatique et √† ses API pour l'apprentissage profond

- [**SpaCy**](https://spacy.io/) en Python / [**Spacy**](http://spacyr.quanteda.io/), un *wrapper* en R

- [**NLTK**](https://www.nltk.org/) en Python

- [**Tidytext**](https://juliasilge.github.io/tidytext/) en R

## *Web scraping* / Python

- Python est souvent cit√© comme un langage de choix pour le *Web scraping*

<br>

- [**BeautifoulSoup**](https://beautiful-soup-4.readthedocs.io/en/latest/) en Python / [**Rvest**](https://rvest.tidyverse.org/) en R
- [**Selenium**](https://www.selenium.dev/documentation/) en Python / [**Rselenium**](https://docs.ropensci.org/RSelenium/index.html) en R
- [**Scrapy**](https://scrapy.org/) (*crawling* et *scraping*) en Python

:::{.notes}
Le "web scraping", pour utiliser une d√©finition minimale, est le processus de traitement d'un document web et d'extraction d'informations √† partir de celui-ci. Il est possible de faire du "web scraping" sans faire de "web crawling".

Le "web crawling", pour utiliser une d√©finition minimale, est le processus de recherche et de r√©cup√©ration it√©rative de liens web √† partir d'une liste d'URL de d√©part. Strictement parlant, pour faire du web crawling, vous devez faire un certain degr√© de web scraping (pour extraire les URL).
:::

## Web S√©mantique / Ing√©nierie de la connaissance

<div class="center">
<img src="images/sw-w3c.svg" style="width: 40%"/>
</div>

- Pour r√©cup√©rer des donn√©es sous forme de triplets RDF... mais √©galement pour mod√©lisation ontologique

- Python : [**RDFLib**](https://rdflib.dev/), [**owlready**](https://owlready2.readthedocs.io/en/latest/)

- Diff√©rentes initiatives en R ([**rdflib**](https://docs.ropensci.org/rdflib/), **ontologyPlot**, etc.), moins abouties √† mon gout

- Le langage Java reste probablement le langage de choix (*Jena*, *OWLAPI*, *RDF4J*, diff√©rents moteurs d'inf√©rence, etc.)

:::{.notes}

En informatique et en science de l'information, une ontologie est un mod√®le de donn√©es contenant des concepts et relations permettant de mod√©liser un ensemble de connaissances dans un domaine donn√©.

Le terme est utilis√© par analogie avec le concept philosophique d'ontologie, qui est l'√©tude de l'√™tre en tant qu'√™tre, l'√©tude des propri√©t√©s g√©n√©rales de ce qui existe.

:::

## Pour r√©sumer...

:::{.small}

+-----------------------------------+------------------------------+--------------------+
| Domaine                           | **Python**                   | **R**              |
+===================================+==============================+====================+
| Manipulation de donn√©es           | Pandas, polars               | R base, tibble,    |
|                                   |                              | data.table         |
+-----------------------------------+------------------------------+--------------------+
| Statistique                       | Statsmodels, Scipy           | R base, stats,     |
|                                   |                              | FactoMineR         |
+-----------------------------------+------------------------------+--------------------+
| Apprentissage automatique         | Scikit-learn,                | mlr3, nnet,        |
| ou profond                        | Tensorflow, PyTorch          | Tensorflow         |
+-----------------------------------+------------------------------+--------------------+
| Visualisation                     | Matplotlib, Seaborn,         | R base, ggplot2,   |
|                                   | Bokeh, Plotly                | Bokeh, Plotly      |
+-----------------------------------+------------------------------+--------------------+
| G√©ospatial                        | GeoPandas, Shapely,          | sf, terra,         |
|                                   | Rasterio, PySal              | spdep, gstat       |
+-----------------------------------+------------------------------+--------------------+
| Web scraping                      | BeautifoulSoup4, Selenium,   | Rselenium, Rvest   |
|                                   | Scrapy                       |                    |
+-----------------------------------+------------------------------+--------------------+
| Traitement automatis√© de la       | Spacy, NLTK                  | Spacyr, NLP,       |
| langue                            |                              | Tidytext           |
+-----------------------------------+------------------------------+--------------------+
| Programmation lettr√©e             | Jupyter notebook, Quarto     | R Markdown, Quarto |
+-----------------------------------+------------------------------+--------------------+

:::

## Pour r√©sumer...

:::{.medium}

- Deux √©cosyst√®mes tr√®s actifs pour √™tre √† jour (ou √† la pointe) dans les diff√©rents domaines scientifiques

- De nombreuses biblioth√®ques sont disponibles dans les deux langages (Selenium, Bokeh, Plotly, Tesseract, ImageMagik, Spacy, etc.)

- La possibilit√© d'utiliser :
  - R depuis Python ([RPy2](https://rpy2.github.io/))
  - Python depuis R ([Reticulate](https://rstudio.github.io/reticulate/))

- Interop√©rabilit√© avec d'autres langages
  - R : [C/C++](https://www.rcpp.org/), [Java](https://rforge.net/rJava/), JavaScript, etc.
  - Python : C/C++ (plusieurs solutions), [Java](https://pyjnius.readthedocs.io/en/stable/), [Rust](https://pyo3.rs/), JavaScript, etc.
:::

# Valoriser ses r√©sultats

:::{.small}
Plusieurs mani√®res de valoriser les scripts √©crits dans les deux langages ainsi que les r√©sultats obtenus existent :

- programmation lettr√©e
- publication sur le Web
- d√©veloppement d'une application Web
- d√©veloppement d'une application mobile, etc.
:::


## *Notebooks* et programmation lettr√©e

- Les deux langages ont en commun une partie de l'√©cosyst√®me :

  * [**R markdown**](https://rmarkdown.rstudio.com/) (pour R mais permet d'utiliser Python)

  * [**Jupyter notebook**](https://jupyter-notebook.readthedocs.io/en/latest/) (pour Python mais permet d'utiliser R)

  * [**Quarto**](https://quarto.org/) (permet d'utiliser R et Python - utilis√© pour cette pr√©sentation)

## Quarto

<div class="center">
<img src="images/logo-quarto.png" style="width:500px;"/>
</div>

- [**Quarto**](https://quarto.org/) : *"An open-source scientific and technical publishing system"* (R, Python, Julia, Observable JavaScript)

- Principe de la **programmation lettr√©e** (*litterate programming*)

- Pour pr√©parer diff√©rents types de documents (page HTML, slides, PDF, document Word, etc.)



## Example Interop√©rabilit√© R / Python avec Quarto

### Load the data

Load the data from the [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-08-24/readme.md) repository:

```{r}
#| label: read-data
#| echo: true
#| message: false
#| cache: true
lemurs <- readr::read_csv(
  'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-24/lemur_data.csv'
)
```

## Example Interop√©rabilit√© R / Python avec Quarto

### Data wrangling (with R)

Filter the data to only look at adult male Collared Brown Lemurs, and extract only the age and weight columns:

```{r}
#| label: wrangling
#| echo: true
#| message: false
#| output-location: slide
library(dplyr)
library(knitr)

lemur_data <- lemurs %>% 
  filter(taxon == "ECOL",
         sex == "M",
         age_category == "adult") %>% 
  select(c(age_at_wt_mo, weight_g)) %>% 
  rename(Age = age_at_wt_mo, 
         Weight = weight_g)
kable(head(lemur_data))
```

## Example Interop√©rabilit√© R / Python avec Quarto

### Modelling (with Python)

Fit a linear model using Python:

```{python}
#| label: modelling
#| echo: true
#| message: false
lemur_data_py = r.lemur_data

import statsmodels.api as sm
y = lemur_data_py[["Weight"]]
x = lemur_data_py[["Age"]]
x = sm.add_constant(x)
mod = sm.OLS(y, x).fit()
lemur_data_py["Predicted"] = mod.predict(x)
lemur_data_py["Residuals"] = mod.resid
```

## Example Interop√©rabilit√© R / Python avec Quarto

### Plot the residuals (with R)

```{r}
#| label: plotting
#| echo: true
#| output-location: slide
#| message: false
#| fig-align: center
#| fig-alt: "Scatter plot of predicted and residual values for the fitted linear model."
library(reticulate)
library(ggplot2)
lemur_residuals <- py$lemur_data_py
ggplot(data = lemur_residuals,
       mapping = aes(x = Predicted,
                     y = Residuals)) +
  geom_point(colour = "#2F4F4F") +
  geom_hline(yintercept = 0,
             colour = "red") +
  theme(panel.background = element_rect(fill = "#eaf2f2",
                                        colour = "#eaf2f2"),
        plot.background = element_rect(fill = "#eaf2f2",
                                       colour = "#eaf2f2"))
```

## Publication sur le Web d'interfaces interactives de visualisation

<br>

- R : [**Shiny**](https://shiny.posit.co/) (aussi pour [Python](https://shiny.rstudio.com/py/docs/overview.html))

- Python : [**Bokeh** (et *Bokeh Server*)](https://docs.bokeh.org/en/latest/docs/user_guide/server.html), [**Dash**](https://dash.plotly.com/)

- [Exemple d'application Shiny (R)](https://gallery.shinyapps.io/051-movie-explorer/) vs. [Exemple d'application Bokeh Server](https://demo.bokeh.org/movies) vs. [Exemple d'application Dash](https://tracking-dashboard-app.herokuapp.com/dashboard)

<br>

- Python : [**Gradio**](https://www.gradio.app/) - *Build & share delightful machine learning apps*  
  (...mais aussi des dashboards interactifs √† la Shiny)


## D√©veloppement d'application Web

:::{.medium}

- En R, principalement [`servr`](https://github.com/yihui/servr) (bas√© sur `httpuv`) ou [`plumber`](https://www.rplumber.io/)

- Python est un langage de premier choix pour le d√©veloppement Web c√¥t√© serveur (sites Web dynamiques, API REST, etc.): **Flask**, **Django**, **FastAPI**, etc., etc.
  \+ *template engine* (Jinja 2) + connexion √† bases de donn√©es + etc. etc.

- Ces frameworks tirent profit de la syntaxe √©pur√©e du Python et de ses capacit√©s en termes de *metaprogramming* pour permettre d'√©crire des serveurs Web personnalis√©s

- D√©ployment facile.
  
- Exemple en SHS : [Magrit](https://magrit.cnrs.fr)

- Exemple en SHS : [Ruitor](https://github.com/ANRChoucas/Ruitor) (par Mattia Bunel dans le cadre de sa th√®se : programmation orient√© ontologie, manipulation de rasters + API Web)

:::

## D√©veloppement d'application Web / FastAPI

:::{.medium}

```python
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

:::

## D√©veloppement d'application Web / FastAPI

<div class="center">
<img src="images/fastapi-docs.png" style="width: 90%; border: solid 1px black" />
</div>


## D√©veloppement d'application Desktop

<br>

- **PyQt** / **PySide** : pour utiliser la biblioth√®que **Qt** pour d√©velopper des applications de bureau

- **Tkinter**, **PySimpleGUI** ([exemple](https://pysimplegui.trinket.io/demo-programs#/demo-programs/intro-to-this-page))

- Exemple en SHS : Besoin d'une petite interface pour faciliter l'import des donn√©es (avant un traitement effectu√© en R ou en Python) pour
  que les chercheurs d'un projet qui n'utilisent pas la programmation puissent effectuer eux-m√™mes leurs analyses...


## D√©veloppement d'application mobiles (Android / iOS)

:::{.medium}

- M√™me en SHS certains projets peuvent d√©boucher sur le d√©veloppement d'une application mobile.

- Ou alors pour vendre une application mobile sur le Google Play Store et gagner des millions...

En Python :

- [Beeware](https://beeware.org/) - Applications multiplateformes (Windows, Linux, Mac OS, Android, iOS, Web)
- [Kivy](https://kivy.org/doc/stable/guide/android.html) - Applications multiplateformes (Windows, Linux, Mac OS, Android, iOS)

:::


## D√©veloppement d'application mobiles (Android / iOS)

<div class="center">
<img src="images/beeware-app.png" style="width: 45%" />
</div>


# Programmer pour autre chose que la science des donn√©es, programmer dans d'autres environnements, etc.

:::{.small}
Quand on prend gout √† la programmation, il n'est pas rare de vouloir automatiser diff√©rents types de t√¢ches
(op√©ration de maintenance sur une machine perso. ou sur un serveur, r√©cup√©ration de donn√©es du Web, etc.)
ou de voir plus loin que l'ex√©cution de scripts d√©di√©s √† l'analyse de donn√©es...
:::

## Python, un langage polyvalent

<br>

- *Glue language*

<br>

- Comme langage de script dans de nombreuses applications : ESRI ArcGIS, Autodesk Maya, Inkscape, Blender, QGIS, etc.

:::{.notes}

Rait r√©f√©rence √† un langage de programmation con√ßu sp√©cifiquement pour √©crire et g√©rer des programmes et des codes qui relient entre eux diff√©rents composants logiciels.
Il permet l'interconnexion, le soutien et l'int√©gration de programmes et de composants logiciels cr√©√©s √† l'aide de diff√©rents langages de programmation et plates-formes.


:::

## Python dans QGIS

:::{.medium}

- Python est le langage de choix dans l'application SIG de bureau QGIS :

  - Ex√©cuter des commandes dans la console Python
  - Cr√©er des plugins
  - Ex√©cuter automatiquement du code au d√©marrage de QGIS
  - Cr√©er des algorithmes de traitement pour la boire √† outils *geoprocessing*, des fonctions pour les *expressions QGIS*
  - Cr√©er des applications personnalis√©es bas√©es sur l'API QGIS

<br>

- Exemple : [Le plugin DistanceCartogram](https://github.com/mthh/QgisDistanceCartogramPlugin)

:::

## Python dans Inkscape

:::{.medium}

- La majorit√© des extensions de Inkscape sont des scripts Python  
  (d'apr√®s [https://inkscape.org/fr/developper/extensions/](https://inkscape.org/fr/developper/extensions/)),  
  et il existe des ressources pour faciliter l'√©criture de scripts Python pour Inkscape :

<div class="center">
<img src="images/inkscape_scripting.png" />
<p>Source: <a href="https://inkscape.org/~pakin/%E2%98%85simple-inkscape-scripting">https://inkscape.org/~pakin/%E2%98%85simple-inkscape-scripting</a></p>
</div>

:::

## Python dans Blender

:::{.medium}

- Blender : un logiciel libre de mod√©lisation, d‚Äôanimation par ordinateur et de rendu en 3D

- Int√®gre une console Python, permet d'interagir avec de nombreux aspects de Blender dont notamment l‚Äôanimation, le rendu, l‚Äôimport et l‚Äôexport, la cr√©ation d‚Äôobjet et l'√©x√©cution automatis√©e de t√¢ches r√©p√©titives

- Pour en savoir plus: [https://docs.blender.org/api/current/info_overview.html](https://docs.blender.org/api/current/info_overview.html)

<div class="center">
<img src="https://tabreturn.github.io/img/aqitbcc01/getting-started-blender.png" style="width: 400px" />
<p>Source : <a href="https://tabreturn.github.io/code/blender/python/2020/06/06/a_quick_intro_to_blender_creative_coding-part_1_of_3.html">A Quick Intro to Blender Creative Coding ‚Äì part 1 of 3</a></p>
</div>

:::


# Conclusion


## Quoi retenir ?

:::{.medium}

- R a plus de fonctions natives (et probablement de meilleurs packages) d√©di√©s √† la statistique

- De mani√®re g√©n√©rale, R est excellent pour les statistiques
  (√ßa ne veut pas dire que Python est mauvais pour autant ;))

- L'√©cosyst√®me Python est toutefois tr√®s bien √©quip√© pour la science des donn√©es

- Il est g√©n√©ralement plus simple de faire des t√¢ches non-statistiques en Python

- Voir [https://www.tiobe.com/tiobe-index/](https://www.tiobe.com/tiobe-index/) / [https://pypl.github.io/PYPL.html](https://pypl.github.io/PYPL.html)

- March√© de l'emploi (en g√©n√©ral, et sp√©cifiquement dans votre communaut√©)

:::

:::{.notes}

L'indice TIOBE de la communaut√© des programmeurs est un indicateur de la popularit√© des langages de programmation.

L'indice est mis √† jour une fois par mois. Les classements sont bas√©s sur le nombre d'ing√©nieurs qualifi√©s dans le monde, les cours et les fournisseurs tiers. Les moteurs de recherche populaires tels que Google, Bing, Yahoo !, Wikipedia, Amazon, YouTube et Baidu sont utilis√©s pour calculer les cotes. Il est important de noter que l'indice TIOBE ne concerne pas le meilleur langage de programmation ou le langage dans lequel le plus grand nombre de lignes de code ont √©t√© √©crites.

::::

## Tentative de synth√®se de la comparaison

:::{.small}

+-----------------------------------+------------------------------+--------------------+
| *Item compar√©*                    | **Python**                   | **R**              |
+===================================+==============================+====================+
| Documentation de base             | **Win**                      |                    |
+-----------------------------------+------------------------------+--------------------+
| √âl√©gance / syntaxe                | **Win**                      |                    |
+-----------------------------------+------------------------------+--------------------+
| OOP, metaprogramming              | *Tie*                        | *Tie*              |
+-----------------------------------+------------------------------+--------------------+
| Packages additionnels             | *Tie*                        | *Tie*              |
+-----------------------------------+------------------------------+--------------------+
| Documentation                     |                              |  **Win**           |
| packages additionnels             |                              |                    |
+-----------------------------------+------------------------------+--------------------+
| Prix du ticket d'entr√©e /         |                              |  **Win**           |
| simplicit√© de l'√©cosyst√®me        |                              |                    |
+-----------------------------------+------------------------------+--------------------+
| Collecte de donn√©es,              | **Win**                      |                    |
| Web scraping, etc.                |                              |                    |
+-----------------------------------+------------------------------+--------------------+
| Statistique                       |                              |  **Win**           |
+-----------------------------------+------------------------------+--------------------+
| Visualisation                     |                              |  **Win**           |
+-----------------------------------+------------------------------+--------------------+
| Apprentissage automatique         | **Win**                      |                    |
+-----------------------------------+------------------------------+--------------------+
| G√©ospatial                        | *Tie*                        |  *Tie*             |
+-----------------------------------+------------------------------+--------------------+
| Traitement automatis√© de la       | **Win**                      |                    |
| langue                            |                              |                    |
+-----------------------------------+------------------------------+--------------------+
| Programmation lettr√©e             | *Tie*                        |  *Tie*             |
+-----------------------------------+------------------------------+--------------------+
| Web / Mobile / Programmation      | **Win**                      |                    |
| embarqu√©e                         |                              |                    |
+-----------------------------------+------------------------------+--------------------+

:::

::: {.notes}

√áa d√©pend de ce qu'on appelle "g√©ospatial"... 
SIG en g√©n√©ral ? Python probablement
Statistiques spatiales, algo sp√©cifique √† l'√©cologie, etc... R probablement

:::

## Mon avis sur la question...

:::{.medium}

<br>

- **Python vs. R**, lequel apprendre... *en premier* ?

- Pourquoi connaitre les 2 ?

<br>

- Quels types de donn√©es ? Pour quel(s) besoin(s) ? √Ä quelle(s) √©ch√©ance(s) ?

<br>

- Qu'utilisent vos coll√®gues (bureau / couloir) et la communaut√© dans laquelle vous vous inscrivez ?


:::

## Un dernier mot...

<br>

- Appendre √† transformer ses id√©es en logique "informatique" plut√¥t que de se formaliser sur (ou se f√¢cher avec)
  la syntaxe de l'un ou l'autre des langages


- Utiliser le langage qui vous *hype* le plus... prendre du plaisir et s'amuser en √©crivant du code informatique est important !


# Analyse comparative Python / R pour les SHS

<br>
<div style="text-align: center;">
<img src="images/logo-python-vs-r.png" style="margin: auto; width: 600px; height: auto;" />
<p>16 mai 2023</p>
<p>Matthieu Viry - <a href="mailto:matthieu.viry@cnrs.fr">matthieu.viry@cnrs.fr</a></p>
</div>

